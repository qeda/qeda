#!/usr/bin/env node

'use strict';

var fs = require('fs');
var nopt = require('nopt');
var path = require('path');
var yaml = require('js-yaml');
var pkg = require('../package.json');
var QedaLibrary = require('../lib/qeda-library');

function displayUsage() {
  var text =
'Usage:\n\
  qeda [COMMAND]... [OPTION]\n\
\n\
Options:\n\
  -h, --help            Display this information\n\
  --version             Display version information\n\
  -v, --verbose         Display more information while processing\n\
\n\
Commands:\n\
  reset                 Delete current config (use with attention!)\n\
  add COMPONENT         Add component definition to config (with preloading\n\
                        if necessary)\n\
  load COMPONENT        Load component definition from global repository\n\
  power NET             Add power supply symbol to config\n\
  ground NET            Add ground symbol to config\n\
  port                  Add port symbols to config\n\
  sort                  Sort components and nets in config alphabetically\n\
                        (use with caution due to possible annotation issues)\n\
  config PARAM [VALUE]  Set/get config parameter\n\
  generate LIBRARY      Generate libraries according to config\n\
  test COMPONENT        Generate test library with one component only\n\
  completion            Display completion script\n\
\n\
Examples: \n\
  qeda reset\n\
  qeda add ti/iso721\n\
  qeda power +5V_DC\n\
  qeda ground GND_DC\n\
  qeda config output kicad\n\
  qeda generate mylib\n\
\n\
For additional information please refer to:\n\
<http://qeda.org>'
  ;
  console.log(text);
}

function displayHelp() {
  console.log('QEDA: a tool for creating libraries of electronic components\n');
  displayUsage();
}

function displayVersion() {
  var text = 'QEDA v' + pkg.version
  console.log(text);
}

function displayError(error) {
  console.error('Error: ' + error);
  console.log('');
  displayUsage();
  process.exit(1);
}

function readYaml() {
  var yamlName = '.qeda.yaml';
  var res = {};
  if (fs.existsSync(yamlName)) {
    try {
      res = yaml.safeLoad(fs.readFileSync(yamlName));
    } catch(error) {
      console.error(yamlName + ': ' + error.message);
      process.exit(1);
    }
  }
  return res;
}

function writeYaml(obj) {
  var yamlName = '.qeda.yaml';
  try {
    var data = yaml.safeDump(obj, {sortKeys: true});
    fs.writeFileSync(yamlName, data);
  } catch(error) {
    console.error(yamlName + ': ' + error.message);
    process.exit(1);
  }
}

function resetConfig() {
  try {
    fs.unlinkSync('.qeda.yaml');
  } catch(error) {
    if (error.code === 'EACCES') {
      console.error('Error: Access denied, try to use \'sudo\'');
      process.exit(1);
    }
  }
}

function loadComponent(componentName) {
  var qedaYaml = readYaml();
  qedaYaml.config = qedaYaml.config || {};
  var lib = new QedaLibrary(qedaYaml.config);
  lib.load(componentName, true);
}

function addComponent(componentName) {
  var qedaYaml = readYaml();
  qedaYaml.config = qedaYaml.config || {};
  var lib = new QedaLibrary(qedaYaml.config);
  lib.load(componentName);
  qedaYaml.library = qedaYaml.library || [];
  qedaYaml.library.map(function (v) { return v.toLowerCase(); });
  componentName = componentName.toLowerCase();
  if (qedaYaml.library.indexOf(componentName) === -1) {
    qedaYaml.library.push(componentName);
    writeYaml(qedaYaml);
  }
}

function addPower(netName) {
  var qedaYaml = readYaml();
  qedaYaml.power = qedaYaml.power || [];
  if (qedaYaml.power.indexOf(netName) === -1) {
    qedaYaml.power.push(netName);
    writeYaml(qedaYaml);
  }
}

function addGround(netName) {
  var qedaYaml = readYaml();
  qedaYaml.ground = qedaYaml.ground || [];
  if (qedaYaml.ground.indexOf(netName) === -1) {
    qedaYaml.ground.push(netName);
    writeYaml(qedaYaml);
  }
}

function addPort() {
  var qedaYaml = readYaml();
  qedaYaml.port = true;
  writeYaml(qedaYaml);
}

function generateLibrary(libraryName) {
  var qedaYaml = readYaml();
  qedaYaml.library = qedaYaml.library || [];
  qedaYaml.power = qedaYaml.power || [];
  qedaYaml.ground = qedaYaml.ground || [];
  if (qedaYaml.library.length === 0 &&
      qedaYaml.power.length === 0 &&
      qedaYaml.ground.length === 0) {
    console.error('Error: Nothing to generate');
    console.error('');
    console.error('Run command \'qeda add | power | ground ...\' at least once');
    console.error('Try \'qeda --help\' for more information.');
    process.exit(1);
  }
  qedaYaml.config = qedaYaml.config || {};
  var lib = new QedaLibrary(qedaYaml.config);
  for (var i = 0; i < qedaYaml.library.length; ++i) {
    lib.add(qedaYaml.library[i]);
  }
  for (var i = 0; i < qedaYaml.power.length; ++i) {
    lib.power(qedaYaml.power[i]);
  }
  for (var i = 0; i < qedaYaml.ground.length; ++i) {
    lib.ground(qedaYaml.ground[i]);
  }
  if (qedaYaml.port === true) {
    lib.port()
  }
  lib.generate(libraryName);
}

function sort() {
  var qedaYaml = readYaml();
  for (var k in qedaYaml) {
    if (Array.isArray(qedaYaml[k])) {
      qedaYaml[k].sort();
    }
  }
  writeYaml(qedaYaml);
}

function config(param, value) {
  var qedaYaml = readYaml();
  qedaYaml.config = qedaYaml.config || {};
  var libConfig = new QedaLibrary();
  var keys = param.split('.');
  var key = keys[0];
  var obj = qedaYaml.config;
  for (var i = 1; i <= keys.length; ++i) {
    if (typeof libConfig[key] === 'undefined' || libConfig[key] === null) {
      console.error('Error: Wrong parameter name \'' + param + '\'');
      process.exit(1);
    }
    libConfig = libConfig[key];
    if (i < keys.length) {
      if (typeof obj[key] === 'undefined' || obj[key] === null) {
        obj[key] = {};
      }
      obj = obj[key];
      key = keys[i];
    } else if (typeof libConfig === 'object') {
      console.error('Error: Parameter name \'' + param + '\' is not complete');
      process.exit(1);
    }
  }

  if (typeof value === 'undefined' || value === null) { // Only display
    if (typeof obj[key] === 'undefined' || obj[key] === null) {
      console.error('Error: Parameter \'' + param + '\' not found');
      process.exit(1);
    } else {
      var value = obj[key];
      console.log(value);
    }
  } else { // Change value
    // Parse value type
    if (value.toLowerCase() === 'true') {
      value = true;
    } else if (value.toLowerCase() === 'false') {
      value = false;
    } else {
      var floatValue = parseFloat(value);
      if (!isNaN(floatValue)) {
        value = floatValue
      }
    }
    obj[key] = value;
    writeYaml(qedaYaml);
  }
}

function testComponent(componentName) {
  var qedaYaml = readYaml();
  qedaYaml.config = qedaYaml.config || {};
  var lib = new QedaLibrary(qedaYaml.config);
  lib.add(componentName);
  lib.generate('test_' + path.basename(componentName.toLowerCase()));
}

var args = nopt(
  {
    help: Boolean,
    verbose: Boolean,
    version: Boolean,
  },
  {
    'h': ['--help'],
    'v': ['--verbose'],
  }
);

if (args.help) {
  displayHelp();
  process.exit(0);
}

if (args.version) {
  displayVersion();
  process.exit(0);
}

if (args.argv.remain.length < 1) {
  displayError('No arguments');
}

var command = args.argv.remain[0];
switch (command) {
  case 'reset':
    resetConfig();
    break;
  case 'add':
    if (args.argv.remain.length < 2) {
      displayError('Missing component name after "add" command');
    }
    addComponent(args.argv.remain[1]);
    break;
  case 'load':
    if (args.argv.remain.length < 2) {
      displayError('Missing component name after "load" command');
    }
    loadComponent(args.argv.remain[1]);
    break;
  case 'power':
    if (args.argv.original.length < 2) {
      displayError('Missing net name after "power" command');
    }
    addPower(args.argv.original[1]);
    break;
  case 'ground':
    if (args.argv.original.length < 2) {
      displayError('Missing net name after "ground" command');
    }
    addGround(args.argv.original[1]);
    break;
  case 'port':
    addPort()
    break;
  case 'config':
    if (args.argv.original.length < 2) {
      displayError('Missing parameter after "config" command');
    }
    config(args.argv.original[1], args.argv.original[2]);
    break;
  case 'sort':
    sort();
    break;
  case 'generate':
    if (args.argv.remain.length < 2) {
      displayError('Missing library name after "generate" command');
    }
    generateLibrary(args.argv.remain[1]);
    break;
  case 'test':
    if (args.argv.remain.length < 2) {
      displayError('Missing component name after "test" command');
    }
    testComponent(args.argv.remain[1]);
    break;
  case 'completion':
    console.log(fs.readFileSync(__dirname + '/../scripts/qeda').toString());
    break;

  default:
    displayError('Unknown command "' + command + '"');
}

process.exit(0);
